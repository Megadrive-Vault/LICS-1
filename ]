#include "killzam.h"
#include "gfx.h"
#include "vramslots.h"
#include "system.h"

static void proc_func(void *v);
static void anim_func(void *v);
static void cube_func(void *v);
static void vram_load(void);

// Fadein Solid Shoot/Fadeout Invisible
static u16 ksequence[4];
static u16 kanim_delay;
static fix16 khysteresis;
static fix16 kddy;

// Dynamic VRAM slot allocation support code
static u16 vram_pos;
static void vram_load(void)
{
	if (vram_pos == 0)
	{
		vram_pos = enemy_vram_alloc(KILLZAM_VRAM_LEN);
		VDP_doVRamDMA((u32)gfx_en_killzam, vram_pos * 32, KILLZAM_VRAM_LEN * 16);
	}
}

// Initialization boilerplate
void en_init_killzam(en_killzam *e)
{
	vram_load();
	e->head.proc_func = &proc_func;
	e->head.anim_func = &anim_func;
	e->head.cube_func = &cube_func;

	e->head.hp = 3;
	e->head.x += 8;
	e->head.y += 24;
	e->y_orig = e->head.y;
	e->head.width = 7;
	e->head.height = 24;

	e->head.direction = ENEMY_RIGHT;

	e->head.size[0] = SPRITE_SIZE(2,3);
	e->head.xoff[0] = -8;
	e->head.yoff[0] = -24;
	e->head.attr[0] = NULL;

	e->dy = FIX16(0.0);
	e->v_dir = KILLZAM_DOWN;
	e->anim_cnt = 0;
	e->anim_frame = 0;
	e->timer = 0;

	ksequence[0] = system_ntsc ? 48 : 40;
	ksequence[1] = system_ntsc ? 96 : 80;
	ksequence[2] = system_ntsc ? 144 : 120;
	ksequence[3] = system_ntsc ? 192 : 160;
	kanim_delay = system_ntsc ? 12 : 10;
	khysteresis = system_ntsc ? FIX16(2.083) : FIX16(2.4);
	kddy = system_ntsc ? FIX16(0.2084) : FIX16(0.22);
}

// Reset the VRAM allocation position counter
void en_unload_killzam(void)
{
	vram_pos = 0;
}

static inline void v_movement(en_killzam *e)
{
	// Vertical movement
	if (e->v_dir == KILLZAM_DOWN)
	{
		e->dy = fix16Add(e->dy, kddy);
		if (e->dy > khysteresis)
		{
			e->v_dir = KILLZAM_UP;
		}
	}	
	else
	{
		e->dy = fix16Sub(e->dy, kddy);
		if (e->dy < -khysteresis)
		{
			e->v_dir = KILLZAM_DOWN;
		}
	}
	if (e->dy == FIX16(0.0) && e->v_dir == KILLZAM_DOWN)
	{
		e->head.y = e->y_orig;
	}
	e->head.y += fix16ToInt(fix16Add(e->dy, FIX16(0.5)));
}


// Single-frame physics and interaction handler
static void proc_func(void *v)
{
	en_killzam *e = (en_killzam *)v;
	v_movement(e);
}

// Single-frame animation and sprite placement handler
static void anim_func(void *v)
{
	en_killzam *e = (en_killzam *)v;
	if (e->anim_cnt >= kanim_delay)
	{
		e->anim_cnt = 0;
		if (e->anim_frame != 0)
		{
			e->anim_frame = 0;
		}
		else
		{
			e->anim_frame = 6;
		}
	}
	else
	{
		e->anim_cnt++;
	}

	e->head.attr[0] = TILE_ATTR_FULL(ENEMY_PALNUM, 0, 0, e->head.direction, vram_pos + e->anim_frame);
}

static void cube_func(void *v)
{
	en_killzam *e = (en_killzam *)v;
	
}
